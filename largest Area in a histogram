class Main{
    public static Vector<Integer> NSL(int arr[]){
        Stack<Integer> stk = new Stack<>();
        Vector<Integer> vec = new Vector<>();

        for (int i = 0;i<arr.length;i++){
            while (stk.size() > 0 && arr[stk.peek()]>=arr[i]){
                stk.pop();
            }
            if (stk.isEmpty()){
                vec.add(-1);
            }
            else {
                vec.add(stk.peek());
            }
            stk.push(i);
        }
        return vec;
    }
    public static Vector<Integer> NSR(int arr[]){
        Stack<Integer> stk = new Stack<>();
        Vector<Integer> vec = new Vector<>();
        Vector<Integer> rev_vec = new Vector<>();

        for (int i = arr.length-1;i>=0;i--){
            while (stk.size()>0 && arr[stk.peek()]>=arr[i]){
                stk.pop();
            }
            if (stk.isEmpty()){
                vec.add(7);
            }
            else {
                vec.add(stk.peek());
            }
            stk.push(i);
        }

        for (int i = vec.size()-1;i>=0;i--){
            rev_vec.add(vec.get(i));
        }
        return rev_vec;
    }
    public static void main(String[] args) {                  
        int arr[] = {6,2,5,4,5,1,6};                          
        Vector<Integer> NSL = NSL(arr);                       
        Vector<Integer> NSR = NSR(arr);

        Vector<Integer> width = new Vector<>();
        for (int i = 0;i<NSL.size();i++){
                width.add(NSR.get(i)-NSL.get(i)-1);
        }
        int max = 0;
        for (int i = 0;i<width.size();i++){
            int result = arr[i]*width.get(i);
            if (result > max){
                max = result;
            }
        }
        System.out.println(max);
    }
}

// interesting question 
